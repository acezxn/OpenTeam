rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    function belongsTo(userId) {
      return request.auth.uid == userId;
    }
    function withinSizeLimit(content, size) {
      return content.size() <= size;
    }
    // the collection for holding private user data
    match /user_data/{UID} {
      allow read: if request.auth != null && belongsTo(UID);
    }
    // the collection for holding team invitation requests
    match /invitation_requests/{document=**} {
    	allow read: if request.auth != null;
      // only target user or invitator can update and delete invitation request
      allow update: if belongsTo(resource.data.invitatorUid) || belongsTo(resource.data.targetUid);
      allow delete: if belongsTo(resource.data.invitatorUid) || belongsTo(resource.data.targetUid);
    }
    // the collection for holding user join requests
    match /join_requests/{teamId} {
    	allow read: if request.auth != null;
    }
    // the collection for holding public user data
    match /public_user_data/{UID} {
      allow read;
    }
    // the collection for holding private team data
    match /teams/{teamId} {
      allow read: if request.auth != null && 
      belongsTo(resource.data.ownerUID);

      allow read: if resource.data.publiclyVisible || /databases/$(database)/documents/teams/$(teamId) in get(/databases/$(database)/documents/user_data/$(request.auth.uid)).data.joinedTeams;
    }
    // the collection for holding public team data
    match /public_team_data/{teamId} {
      allow read: if get(/databases/$(database)/documents/teams/$(teamId)).data.publiclyVisible || 
      /databases/$(database)/documents/teams/$(teamId) in get(/databases/$(database)/documents/user_data/$(request.auth.uid)).data.joinedTeams;
      allow read: if request.auth != null && 
      (
        belongsTo(get(/databases/$(database)/documents/teams/$(teamId)).data.ownerUID) || 
        request.auth.uid in get(/databases/$(database)/documents/public_team_data/$(teamId)).data.participants
      );
    }
    // the collection for holding protected team data (public within members)
    match /protected_team_data/{teamId} {
      allow read: if request.auth != null && 
      (
        belongsTo(get(/databases/$(database)/documents/teams/$(teamId)).data.ownerUID) || 
        request.auth.uid in get(/databases/$(database)/documents/public_team_data/$(teamId)).data.participants
      );
    }
    // the collection for holding protected messages
    match /messages/{document=**} {
      allow list: if request.auth != null;
    }
    match /messages/{messageId} {
      // only message owner and team members can read the message
      allow read: if request.auth != null && 
      (
        belongsTo(resource.data.uid) || 
        belongsTo(get(/databases/$(database)/documents/teams/$(resource.data.teamId)).data.ownerUID) ||
        request.auth.uid in get(/databases/$(database)/documents/public_team_data/$(resource.data.teamId)).data.participants
      );
    }
    // the collection for holding protected discussions
    match /discussions/{document=**} {
      allow list: if request.auth != null;
    }
    match /discussions/{discussionId} {
      // only discussion owner and team members can read the discussion
      allow read: if request.auth != null && 
      (
        belongsTo(resource.data.uid) || 
        belongsTo(get(/databases/$(database)/documents/teams/$(resource.data.teamId)).data.ownerUID) ||
        request.auth.uid in get(/databases/$(database)/documents/public_team_data/$(resource.data.teamId)).data.participants
      );
    }
    
    match /comments/{document=**} {
      allow list: if request.auth != null;
    }
    match /comments/{discussionId} {
      // only comment owner and team members can read the comment
      allow read: if request.auth != null && 
      (
        belongsTo(resource.data.uid) || 
        belongsTo(get(/databases/$(database)/documents/teams/$(resource.data.teamId)).data.ownerUID) ||
        request.auth.uid in get(/databases/$(database)/documents/public_team_data/$(resource.data.teamId)).data.participants
      );
    }
  }
}

